use_bpm 76

use_debug false

load_samples [:drum_snare_hard, :drum_snare_soft, :perc_snap, :drum_bass_soft, :drum_cymbal_open, :drum_cymbal_pedal, :bd_gas, :drum_splash_soft]

stopit = false
stopit2 = false

#with_fx :bitcrusher, sample_rate: 3000, bits: 16, cutoff: 100 do

live_loop :beat do
  sample :bd_gas, amp: (ring 4, 3, 2, 1).tick
  sleep 1
  puts "done with beat" if stopit2
  stop if stopit2
end

bar = 4.0
one = 1.0
half = 1.0 / 2 # 0.5
quarter = 1.0 / 4 # 0.25
eighth = 1.0 / 8 # 0.125
sixteenth = 1.0 / 16 # 0.125 / 2

#with_fx :reverb, room: 0.05, damp: 0.9, mix: 0.5 do
pedalit = false
progression = (spread 2, 5, rotate: 2)
#puts progression
live_loop :bd, auto_cue: false do
  revolution = progression.tick
  3.times do # 3*4
    sync :beat
    sample :drum_snare_hard
    sample :drum_cymbal_pedal, amp: 0.7 if pedalit
    sleep quarter
    sample :drum_snare_soft
    sample :perc_snap
    sleep quarter
    sample :drum_cymbal_pedal, amp: 0.2 if pedalit
    sample :drum_bass_soft
    sleep half
    sample :drum_cymbal_pedal, amp: 0.2 if pedalit
    sample :drum_snare_hard
    sleep half
    sample :drum_cymbal_pedal, amp: 0.2 if pedalit
    sample :drum_bass_hard
    sleep half
    sample :drum_cymbal_pedal, amp: 0.6 if pedalit
    sleep half
    sample :drum_cymbal_pedal, amp: 0.2 if pedalit
    sample :drum_snare_soft
    sleep half
    sample :drum_cymbal_pedal, amp: 0.1 if pedalit
    sleep half
    sample :drum_cymbal_pedal, amp: 0.2 if pedalit
    sleep quarter
    sample :drum_snare_soft, amp: 0.1
    sleep sixteenth
    sample :drum_snare_soft, amp: 0.2
    sleep sixteenth
    sample :drum_snare_soft, amp: 0.4
    sample :drum_bass_soft
    sleep sixteenth
    sample :drum_snare_soft, amp: 0.6
    sleep sixteenth
  end
  pedalit = revolution == false
  sync :beat
  sample :drum_cymbal_open, amp: 0.3, finish: 0.32 if pedalit
  ctr = 0
  8.times do
    ctr = ctr + 1
    sample :drum_snare_hard, amp: 0.8 / ctr if ctr == 1
    sample :drum_snare_soft, amp: 0.8 / ctr if ctr > 1
    sleep sixteenth
  end
  sample :drum_cymbal_pedal, amp: 0.6 if pedalit

  sleep 3 * quarter
  sample :drum_splash_soft if pedalit
  sleep 3 * quarter
  ctr = 0
  4.times do
    ctr = ctr + 1
    sample :drum_snare_soft, amp: 1.0 / (ctr*2)
    sample :drum_cymbal_pedal, amp: 1.2 / ctr if ctr == 2 || ctr == 4 if pedalit
    sleep quarter
  end
  puts "done with drums" if stopit
  stopit2 = true if stopit
  sample :drum_splash_soft if stopit
  stop if stopit
end
#end

ch1_1 = chord(:Eb3, :minor)
ch1_2 = chord(:C3, :m9)
ch2_1 = chord(:D3, :minor)
ch2_2 = chord(:F2, :m9)

sc1_1 = scale(:Eb3, :bartok, num_octaves: 2).shuffle
sc1_2 = scale(:C3, :phrygian, num_octaves: 2)
sc2_1 = scale(:D3, :bartok, num_octaves: 2)
sc2_2 = scale(:F2, :phrygian, num_octaves: 2)

live_loop :yay, auto_cue: false do
  4.times do
    sync :beat
    stop if stopit2
    sleep half
    play ch1_1, release: 2.5
    sleep bar
    play ch1_2, release: 2.5
    sleep bar - half
    stop if stopit2
  end
  4.times do
    sync :beat
    stop if stopit2
    sleep half
    play ch2_1, release: 2.5
    sleep bar
    play ch2_2, release: 2.5
    sleep bar - half
    stop if stopit2
  end
end

define :up_eb2 do
  play :eb2, amp: 0.6, sustain: 1
  play :eb3, amp: 0.2, sustain: 1
  sleep eighth
  play :e3, amp: 0.4, sustain: 1.5
  sleep eighth
  play :f3, amp: 0.5, sustain: 2
end

define :fill_1 do
  play :eb4, amp: 0.6, sustain: 3
  sleep sixteenth
  play :c4, amp: 0.4, sustain: 0.75
  sleep sixteenth
  play :bb3, amp: 0.2, sustain: 2
  sleep one + eighth
end

define :fill_2 do
  sleep eighth
  play :fs4, amp: 0.3
  sleep sixteenth
  play :g4, amp: 0.5
  sleep sixteenth
  play :bb4, amp: 0.2
  sleep one + sixteenth
end

define :c_ebass do |min, max, sust|
  vol = rrand(min, max)
  puts vol
  play :e3, amp: vol, sustain: sust
  play :g3, amp: vol, sustain: sust
  play :c4, amp: vol, sustain: sust
  play :g2, amp: vol, sustain: sust
end


live_loop :pianothing, auto_cue: false do
  use_synth :piano
  sync :beat
  stop if stopit2
  16.times do
    sleep bar
    stop if stopit2
  end
  16.times do
    sync :beat
    stop if stopit2
    up_eb2
    sleep bar - quarter
    c_ebass 0.2, 0.5, 3
    sleep one + one + 3*quarter
    if (spread 3, 8, rotate: 1).tick
      fill_1
    else
      fill_2
    end
  end
  stop if stopit2
end

define :chordplay do |c|
  sync :beat
  #with_fx :echo, phase: 0.25, decay: 1, max_phase: 1 do
  in_thread do 8.times do
      play c.tick, release: 0.3, amp: 0.5
      sleep half
    end
  end
  #end
end

uncomment do
  live_loop :otherthing, auto_cue: false do
    use_synth :prophet

    uncomment do
      sync :beat
      32.times do
        sleep bar
      end
    end
    use_synth_defaults release: 4
    4.times do
      sync :beat
      chordplay sc1_1
      play :eb4, amp: 0.4
      sleep bar

      play choose(ch1_2), amp: 0.4
      play choose(ch1_2), amp: 0.3
      sleep bar
    end
    4.times do
      sync :beat
      chordplay sc2_1
      sleep bar
      play choose(ch2_2), amp: 0.4
      play choose(ch2_2), amp: 0.3
      sleep bar
    end
    uncomment do
      sync :beat
      32.times do
        sleep bar
      end
    end
    puts "time to stop it"
    stopit = true
    stop
  end

end

#end #bitcrusher