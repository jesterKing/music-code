use_bpm 76
use_debug false
load_samples [:drum_snare_hard, :drum_snare_soft, :perc_snap, :drum_bass_soft, :drum_cymbal_open, :drum_cymbal_pedal, :bd_gas, :drum_splash_soft]

stopit = false
stopit2 = false

# some helper variables to make it easier to think about duration
bar = 4.0 # bar has four beats
one = 1.0 # one beat
half = 1.0 / 2 # 0.5
quarter = 1.0 / 4 # 0.25
eighth = 1.0 / 8 # 0.125
sixteenth = 1.0 / 16 # 0.125 / 2

pedalit = false

define :upbeatsnare do
  4.times do
    sample :drum_snare_soft, amp: (ring 0.1, 0.2, 0.4, 0.6).tick(:sns)
    sleep sixteenth
  end
end

live_loop :intro do upbeatsnare
stop end

live_loop :beat, delay: quarter do
  sample :bd_gas, amp: (ring 4, 3, 2, 1).tick
  sleep one
  stop if stopit2
end

puts (bools 0, 0, 0, 1)

live_loop :bd, auto_cue: false, delay: quarter do
  revolution = (bools 0, 0, 0, 1).tick
  3.times do # 3*4
    sync :beat
    in_thread do
      8.times do # sleeping 8 halfs, so 4 beats
        sample :drum_cymbal_pedal, amp: (ring 0.7, 0.2, 0.2, 0.2, 0.6, 0.2, 0.1, 0.2).tick(:pedal) if pedalit
        sleep half
      end
    end
    in_thread do
      6.times do # total duration 3, 3/4
        sample (ring :drum_snare_hard, :drum_snare_soft, :drum_bass_soft, :drum_snare_hard, :drum_bass_hard, :drum_snare_soft).tick(:basstick)
        sleep (ring quarter, quarter, half, half, one, one+quarter).look(:basstick)
      end
    end

    sleep quarter
    sample :perc_snap
    sleep 3*one + half # 3 and a half

    upbeatsnare # quarter
  end
  pedalit = revolution == false
  sync :beat
  sample :drum_cymbal_open, amp: 0.3, finish: 0.32 if pedalit
  tick_reset(:rrr)
  with_fx :echo, phase: sixteenth, decay: 16*sixteenth do sample :drum_snare_soft end
  sleep 8*sixteenth
  sample :drum_cymbal_pedal, amp: 0.6 if pedalit
  sleep 3 * quarter # 0.75
  sample :drum_splash_soft if pedalit
  sleep 7 * quarter # 2 1/4
  tick_reset(:rrr)
  4.times do
    tick(:rrr)
    sample :drum_snare_soft, amp: ( ring 1.0, 0.8, 0.2, 0.1).look(:rrr)
    sample :drum_cymbal_pedal, amp: (ring 0.0, 0.6, 0.0, 0.3).look(:rrr) if pedalit
    sleep quarter
  end # 4
  stopit2 = true if stopit
  sample :drum_splash_soft if stopit
  stop if stopit
end

ch1_1 = chord(:Eb3, :minor)
ch1_2 = chord(:C3, :m9)
ch2_1 = chord(:D3, :minor)
ch2_2 = chord(:F2, :m9)
sc1_1 = scale(:Eb3, :bartok, num_octaves: 2).shuffle
sc2_1 = scale(:D3, :bartok, num_octaves: 2)

live_loop :yay, auto_cue: false, delay: quarter do
  3.times do
    sync :beat
    stop if stopit
    sleep half
    play ch1_1, release: 2.5
    sleep bar
    play ch1_2, release: 2.5
    sleep bar - half
    stop if stopit
  end
  sleep half
  play ch1_1, release: 2.5
  sleep bar - half
  3.times do
    sync :beat
    stop if stopit
    sleep half
    play ch2_1, release: 2.5
    sleep bar
    play ch2_2, release: 2.5
    sleep bar - half
    stop if stopit
  end
  sleep half
  play ch2_1, release: 2.5
  sleep bar - half
end

define :up_eb2 do
  play :eb2, amp: 0.6, sustain: 1
  play :eb3, amp: 0.2, sustain: 1
  sleep eighth
  play :e3, amp: 0.4, sustain: 1.5
  sleep eighth
  play :f3, amp: 0.5, sustain: 2
end

define :fill_1 do
  3.times do
    tick :filltick
    play (ring :eb4, :c4, :bb3).look(:filltick), amp: (ring 0.6, 0.4, 0.2).look(:filltick), sustain: (ring 3, 0.75, 2).look(:filltick)
    sleep (ring sixteenth, sixteenth, one+eighth).look(:filltick)
  end
end

define :fill_2 do
  4.times do
    tick :fill2tick
    play (ring :r, :fs4, :g4, :bb4).look(:fill2tick), amp: (ring 0.0, 0.3, 0.5, 0.2).look(:fill2tick)
    sleep (ring eighth, sixteenth, sixteenth, one+sixteenth).look(:fill2tick)
  end
end

define :c_ebass do |min, max, sust|
  vol = rrand(min, max)
  play_chord [:g2, :e3, :g3, :c4], amp: vol, sustain: sust
end

live_loop :pianothing, auto_cue: false, delay: 16*bar + quarter do
  use_synth :piano
  stop if stopit
  16.times do
    sync :beat
    stop if stopit
    up_eb2
    sleep bar - quarter
    c_ebass 0.2, 0.5, 3
    sleep one + one + 3*quarter
    if (spread 3, 8, rotate: 1).tick
      fill_1
    else
      fill_2
    end
  end
  sleep bar*16
  stop if stopit
end

define :chordplay do |c|
  sync :beat
  in_thread do 8.times do
      play c.tick(:cplay), release: 0.3, amp: 0.5
      sleep half
    end
  end
end

live_loop :otherthing, auto_cue: false, delay: 32*bar + quarter do
  use_synth :prophet
  use_synth_defaults release: 4
  2.times do
    sync :beat
    chordplay sc1_1
    sleep bar
    play choose(ch1_2), amp: 0.4
    play choose(ch1_2), amp: 0.3
    sleep bar
  end
  2.times do
    sync :beat
    chordplay sc2_1
    sleep bar
    play choose(ch2_2), amp: 0.4
    play choose(ch2_2), amp: 0.3
    sleep bar
  end
  sleep bar * 32
  stopit = true
  stop
end